syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "ptypes/timestamp/timestamp.proto";

package auth;

extend google.protobuf.MethodOptions {
    AuthChecker checker = 51234;
}

message AuthChecker {
    bool authenticated = 1;
    bool isAdmin = 2;
}

enum Scope {
    public = 0;
    profile = 1;
}

enum TokenType {
    client_credentials = 0;
    access_token = 1;
    refresh_token = 2;
}

message AuthToken {
    TokenType type = 1;
    string value = 2;
    string refreshToken = 3;
    repeated string scope = 4;
    google.protobuf.Timestamp creation = 5;
    google.protobuf.Timestamp expiration = 6;
}

message CreateTokenRequest {
    string grant_type = 3;

    /* Case client_credentials grant type */
    string client_id = 1;
    string client_secret = 2;
    string scope = 4;         // A space-separated list of scopes

    /* Case authorization_code grant type */
    string code = 5;
}

message CreateTokenResponse {
    string token_type = 1;    // Always "bearer"
    string access_token = 2;  // A URL-encoded token
    int32 expires_in = 3;     // Expiration in seconds
    string scope = 4;         // A space-separated list of scopes
}

service AuthService {
    rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
        option (google.api.http) = {
            post: "/oauth/tokens"
            body: "*"
        };
    }
}
